/// \file NoiseAnalysisModule.h
/*
 *
 * AsicAnalysisModule.h header template automatically generated by a class generator
 * Creation date : mon. march 21 2016
 *
 * This file is part of DQMSDHCAL libraries.
 *
 * DQMSDHCAL is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQMSDHCAL is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQMSDHCAL.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete, Laurent Mirabito, Antoine Pingault
 * @copyright CNRS , IPNL
 */


#ifndef NOISEANALYSISMODULE_H
#define NOISEANALYSISMODULE_H

// -- dqm4hep headers
#include "dqm4hep/DQM4HEP.h"
#include "dqm4hep/DQMAnalysisModule.h"

// -- dqm sdhcal headers
#include "Mapping.h"

// -- lcio headers
#include "lcio.h"
#include "EVENT/RawCalorimeterHit.h"

// -- clhep headers
#include "CLHEP/Vector/ThreeVector.h"

// -- std headers
#include <string>
#include <cstring>
#include <vector>


class RawCaloHit
{
public:
  RawCaloHit(CLHEP::Hep3Vector vec, int chanId, int asicId, int layerId, int threshold, int time, CLHEP::Hep3Vector posShift);
  // algorithms assume that the zero is located at the middle of the first layer.

  ~RawCaloHit() {;}

  inline const CLHEP::Hep3Vector getPosition() {return m_rawHitPosition;}
  inline const int getThreshold() {return m_threshold;}
  inline const float getTime() {return m_time;}
  inline const int getchannelId() {return m_chanId;}
  inline const int getAsicId() {return m_asicId;}
  inline const int getLayerId() {return m_layerId;}

private:
  int m_chanId;
  int m_asicId;
  int m_layerId;
  CLHEP::Hep3Vector m_rawHitPosition;
  float m_threshold;
  int m_time;
};


namespace dqm4hep { class TiXmlElement; class TiXmlHandle; }

namespace dqm_sdhcal
{

class NoiseAnalysisModule : public dqm4hep::DQMAnalysisModule
{
public:
  NoiseAnalysisModule();
  virtual ~NoiseAnalysisModule();

protected:
  virtual dqm4hep::StatusCode userInitModule();
  virtual dqm4hep::StatusCode userReadSettings(const dqm4hep::TiXmlHandle xmlHandle);
  virtual dqm4hep::StatusCode processNoisyEvent(EVENT::LCEvent *pLCEvent);
  virtual dqm4hep::StatusCode processPhysicalEvent(EVENT::LCEvent *pLCEvent);

private:
  // from analysis module
  dqm4hep::StatusCode initModule();
  dqm4hep::StatusCode readSettings(const dqm4hep::TiXmlHandle xmlHandle);
  dqm4hep::StatusCode processEvent(dqm4hep::DQMEvent *const pEvent);

  dqm4hep::StatusCode startOfRun(dqm4hep::DQMRun *const pRun);
  dqm4hep::StatusCode endOfRun(dqm4hep::DQMRun *const pRun);
  dqm4hep::StatusCode startOfCycle();
  dqm4hep::StatusCode endOfCycle();
  dqm4hep::StatusCode endModule();

  // Trivent function
  dqm4hep::StatusCode readGeometry(const std::string &fileName);
  dqm4hep::StatusCode readDifGeometry(dqm4hep::TiXmlElement *pElement);
  dqm4hep::StatusCode readChamberGeometry(dqm4hep::TiXmlElement *pElement);
  unsigned int getCellDifId(int cellId) {return cellId & 0xFF;}
  unsigned int getCellAsicId(int cellId) {return (cellId & 0xFF00) >> 8;}
  unsigned int getCellChanId(int cellId) {return (cellId & 0x3F0000) >> 16;}
  std::vector<dqm4hep::dqm_uint> getPadIndex(unsigned int difId, unsigned int asicId, unsigned int chanId);


  dqm4hep::StatusCode decodeTrigger( EVENT::LCCollection* const pRawCalorimeterHitCollection, EVENT::RawCalorimeterHit * const pRawCaloHit);
  dqm4hep::StatusCode doDIFStudy(EVENT::RawCalorimeterHit * const pRawCaloHit);
  dqm4hep::StatusCode fillAsicOccupancyMap(EVENT::RawCalorimeterHit * const pRawCaloHit);
  dqm4hep::StatusCode doAsicStudy();
  int createAsicKey(int chanId, int difId, int asicId);
  void resetElements();
  // CerenkovTagger


private:
  // module parameters
  std::string                              m_inputCollectionName;
  std::vector<EVENT::RawCalorimeterHit*>   m_rawCalorimeterHitCollection;
  std::string                              m_moduleLogStr;
  std::string                              m_geomXMLFile;
  std::string                              m_detectorName;
  std::map<int, int>                       m_asicMap;

  unsigned int                             m_nActiveLayers;
  unsigned int                             m_nAsicPerDif;
  unsigned int                             m_nDifPerLayer;
  unsigned int                             m_nChanPerAsic;

  int                                      m_nEventProcessed;
  unsigned long long                       m_eventIntegratedTime;
  unsigned long long                       m_spillIntegratedTime;
  unsigned long long                       m_totalIntegratedTime;
  unsigned long long                       m_hitTimeMin;
  unsigned long long                       m_hitTimeMax;

  bool                                     m_dropFirstSpillEvent;
  unsigned long long                       m_previousBCID;
  double                                   m_timeLastTrigger;
  double                                   m_timeLastSpill;
  float                                    m_DAQ_BC_Period;
  unsigned int                             m_nParticleLastSpill;
  // Cuts
  int                                      m_skipEvent;
  double                                   m_newSpillTimeCut;


  // Monitor Elements
  //
  dqm4hep::DQMMonitorElementPtr               m_pTimeDiffSpill;
  dqm4hep::DQMMonitorElementPtr               m_pTimeDiffTriggerToSpill;
  dqm4hep::DQMMonitorElementPtr               m_pSpillLength;
  dqm4hep::DQMMonitorElementPtr               m_pAsicOccupancyAll;
  dqm4hep::DQMMonitorElementPtr               m_pAsicOccupancyChamber;
  dqm4hep::DQMMonitorElementPtr               m_pAsicOccupancyDIF;
  dqm4hep::DQMMonitorElementPtr               m_pAcquisitionTime;
  dqm4hep::DQMMonitorElementPtr               m_pHitFrequencyMap;

  struct DifElements
  {
    dqm4hep::DQMMonitorElementPtr             m_pAsicHits1;
    dqm4hep::DQMMonitorElementPtr             m_pAsicHits2;
    dqm4hep::DQMMonitorElementPtr             m_pAsicHits3;
    dqm4hep::DQMMonitorElementPtr             m_pAsicFreq1;
    dqm4hep::DQMMonitorElementPtr             m_pAsicFreq2;
    dqm4hep::DQMMonitorElementPtr             m_pAsicFreq3;

    dqm4hep::DQMMonitorElementPtr             m_pAsicOccupancy;
    dqm4hep::DQMMonitorElementPtr             m_pAsicOccupancyNumber;
    dqm4hep::DQMMonitorElementPtr             m_pAsicEventTime;
    dqm4hep::DQMMonitorElementPtr             m_pAsicEventTimeZoom;
  };
 struct LayerElements
  {
    dqm4hep::DQMMonitorElementPtr             m_pChamberHitsMap1;
    dqm4hep::DQMMonitorElementPtr             m_pChamberHitsMap2;
    dqm4hep::DQMMonitorElementPtr             m_pChamberHitsMap3;
    std::map<int, DifElements>                m_difElementMap;
  };
  std::map<unsigned int, LayerElements>       m_layerElementMap;

  struct positionXYZ
  {
    double X;
    double Y;
    double Z;
  };

  std::map<int, LayerID> m_difMapping;
  std::map<int, positionXYZ> m_chamberPositions; //chamber , position

};

}
#endif // NOISEANALYSISMODULE_H
