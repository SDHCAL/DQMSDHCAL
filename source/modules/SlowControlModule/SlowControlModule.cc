/*
 *
 * SlowControlModule.cc source template automatically generated by a class generator
 * Creation date : mar. mars 8 2016
 *
 * This file is part of DQMSDHCAL libraries.
 * 
 * DQMSDHCAL is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQMSDHCAL is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQMSDHCAL.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "SlowControlModule.h"

#include "dqm4hep/DQMModuleApi.h"
#include "dqm4hep/DQMMonitorElement.h"
#include "dqm4hep/DQMXmlHelper.h"
#include "dqm4hep/DQMPlugin.h"

namespace dqm_sdhcal
{

DQM_PLUGIN_DECL( SlowControlModule , "SlowControlModule" )

SlowControlModule::SlowControlModule() :
		dqm4hep::DQMStandaloneModule()
{
	/* nop */
}

//-------------------------------------------------------------------------------------------------

SlowControlModule::~SlowControlModule()
{
	/* nop */
}

//-------------------------------------------------------------------------------------------------

dqm4hep::StatusCode SlowControlModule::readSettings( const dqm4hep::TiXmlHandle xmlHandle )
{
	m_pGlobalTemperatureElement = NULL;
	RETURN_RESULT_IF(dqm4hep::STATUS_CODE_SUCCESS, !=, dqm4hep::DQMXmlHelper::bookMonitorElement(this, xmlHandle,
			"GlobalTemperature", m_pGlobalTemperatureElement));

	m_pGlobalPressureElement = NULL;
	RETURN_RESULT_IF(dqm4hep::STATUS_CODE_SUCCESS, !=, dqm4hep::DQMXmlHelper::bookMonitorElement(this, xmlHandle,
			"GlobalPressure", m_pGlobalPressureElement));

	m_pHighVoltageElement = NULL;
	RETURN_RESULT_IF(dqm4hep::STATUS_CODE_SUCCESS, !=, dqm4hep::DQMXmlHelper::bookMonitorElement(this, xmlHandle,
			"HighVoltage", m_pHighVoltageElement));

	m_pLowVoltageElement = NULL;
	RETURN_RESULT_IF(dqm4hep::STATUS_CODE_SUCCESS, !=, dqm4hep::DQMXmlHelper::bookMonitorElement(this, xmlHandle,
			"LowVoltage", m_pLowVoltageElement));

	m_nLayers = 48;
	RETURN_RESULT_IF_AND_IF(dqm4hep::STATUS_CODE_SUCCESS, dqm4hep::STATUS_CODE_NOT_FOUND, !=, dqm4hep::DQMXmlHelper::readParameterValue(xmlHandle,
			"NLayers", m_nLayers));

	return dqm4hep::STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

dqm4hep::StatusCode SlowControlModule::initModule()
{
	for(unsigned int l=0 ; l<m_nLayers ; l++)
	{
		m_lowVoltageMap[l] = 0.f;
		m_highVoltageMap[l] = 0.f;
	}

	return dqm4hep::STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

dqm4hep::StatusCode SlowControlModule::startOfCycle()
{
	return dqm4hep::STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

dqm4hep::StatusCode SlowControlModule::process()
{
	float temperature = this->getGlobalTemperature();
	m_pGlobalTemperatureElement->get< dqm4hep::TScalarObject<float> >()->Set( temperature );

	float pressure = this->getGlobalPressure();
	m_pGlobalPressureElement->get< dqm4hep::TScalarObject<float> >()->Set( pressure );

	this->getLowVoltageMap(m_lowVoltageMap);
	this->getHighVoltageMap(m_highVoltageMap);

	for(unsigned int l=0 ; l<m_nLayers ; l++)
	{
		m_pLowVoltageElement->get<TH1I>()->SetBinContent( l , static_cast<int>( m_lowVoltageMap[l] ) );
		m_pHighVoltageElement->get<TH1I>()->SetBinContent( l , static_cast<int>( m_highVoltageMap[l] ) );
	}

	return dqm4hep::STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

dqm4hep::StatusCode SlowControlModule::endOfCycle()
{
	return dqm4hep::STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

dqm4hep::StatusCode SlowControlModule::endModule()
{
	return dqm4hep::STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

float SlowControlModule::getGlobalTemperature()
{
	// TODO implements this
	return 0.f;
}

//-------------------------------------------------------------------------------------------------

float SlowControlModule::getGlobalPressure()
{
	// TODO implements this
	return 0.f;
}

//-------------------------------------------------------------------------------------------------

void SlowControlModule::getHighVoltageMap( std::map<unsigned int, float> &highVoltageMap )
{
	// TODO implements this
}

//-------------------------------------------------------------------------------------------------

void SlowControlModule::getLowVoltageMap( std::map<unsigned int, float> &lowVoltageMap )
{
	// TODO implements this
}

} 

