/*
 *
 * SDHCALDetectorModule.cc source template automatically generated by a class generator
 * Creation date : mer. janv. 21 2015
 *
 * This file is part of DQMSDHCAL libraries.
 * 
 * DQMSDHCAL is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQMSDHCAL is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQMSDHCAL.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete, Victor Buridon
 * @copyright CNRS , IPNL
 */


#include "SDHCALDetectorModule.h"

#include "lcdqm/DQMModuleApi.h"
#include "lcdqm/XmlHelper.h"

#include "EVENT/LCEvent.h"
#include "EVENT/LCRunHeader.h"
#include "EVENT/LCCollection.h"
#include "EVENT/LCIO.h"
#include "UTIL/LCTOOLS.h"

using namespace lcdqm;

SDHCALDetectorModule aSDHCALDetectorModule;

//-------------------------------------------------------------------------------------------------

SDHCALDetectorModule::SDHCALDetectorModule()
 : DQMModule("SDHCALDetectorModule")
{
	m_detectorName = "SDHCAL";
	m_version.set(1, 0, 0);
}

//-------------------------------------------------------------------------------------------------

SDHCALDetectorModule::~SDHCALDetectorModule()
{

}

//-------------------------------------------------------------------------------------------------

StatusCode SDHCALDetectorModule::init()
{
	// book monitor elements
//	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMModuleApi::bookIntHistogram1D(this,
//			m_pNHitPlot, "NHit", "Number of hits", 500, 1, 500));
//
//	m_pNHitPlot->setResetPolicy(END_OF_RUN_RESET_POLICY);
//	m_pNHitPlot->setQuality(NO_QUALITY);
//	m_pNHitPlot->setDescription("The number of hits from all collections in the event");
//	m_pNHitPlot->reset();

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode SDHCALDetectorModule::readSettings(const TiXmlHandle &xmlHandle)
{
//	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, XmlHelper::readValue(xmlHandle, "ProcessCollectionType", m_processCollectionType));
//	std::cout << "m_processCollectionType : " << m_processCollectionType << std::endl;

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode SDHCALDetectorModule::end()
{
	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode SDHCALDetectorModule::processEvent(EVENT::LCEvent *pLCEvent)
{
	UTIL::LCTOOLS::dumpEvent(pLCEvent);

//	const std::vector<std::string> *collectionNames = pLCEvent->getCollectionNames();
//
//	for(std::vector<std::string>::const_iterator iter = collectionNames->begin(), endIter = collectionNames->end() ;
//		endIter != iter ; ++iter)
//	{
//		EVENT::LCCollection *pCollection = pLCEvent->getCollection(*iter);
//
//		if(pCollection->getTypeName() == EVENT::LCIO::CALORIMETERHIT)
//		{
//			TH1I *pNHitHisto = (TH1I *) m_pNHitPlot->getObject();
//			pNHitHisto->Fill(pCollection->getNumberOfElements());
//		}
//	}

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode SDHCALDetectorModule::startOfCycle()
{
	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode SDHCALDetectorModule::endOfCycle()
{
	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode SDHCALDetectorModule::startOfRun(EVENT::LCRunHeader *pRunHeader)
{
	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode SDHCALDetectorModule::endOfRun(EVENT::LCRunHeader *pRunHeader)
{
	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode SDHCALDetectorModule::reset()
{
	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

const std::string &SDHCALDetectorModule::getDetectorName() const
{
	return m_detectorName;
}

//-------------------------------------------------------------------------------------------------

const DQMVersion &SDHCALDetectorModule::getVersion() const
{
	return m_version;
}

//-------------------------------------------------------------------------------------------------

