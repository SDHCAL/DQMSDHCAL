/*
 *
 * SDHCALDetectorModule.cc source template automatically generated by a class generator
 * Creation date : mer. janv. 21 2015
 *
 * This file is part of DQMSDHCAL libraries.
 * 
 * DQMSDHCAL is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQMSDHCAL is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQMSDHCAL.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete, Victor Buridon
 * @copyright CNRS , IPNL
 */


#include "SDHCALDetectorModule.h"

#include "lcdqm/DQMModuleApi.h"
#include "lcdqm/XmlHelper.h"

#include "EVENT/LCEvent.h"
#include "EVENT/LCRunHeader.h"
#include "EVENT/LCCollection.h"
#include "EVENT/CalorimeterHit.h"
#include "EVENT/LCIO.h"
#include "UTIL/LCTOOLS.h"
#include "UTIL/CellIDDecoder.h"

// -- streamlog headers
#include "streamlog/streamlog.h"

using namespace lcdqm;

SDHCALDetectorModule aSDHCALDetectorModule;

//-------------------------------------------------------------------------------------------------

SDHCALDetectorModule::SDHCALDetectorModule()
 : DQMModule("SDHCALDetectorModule")
{
	m_detectorName = "SDHCAL";
	m_version.set(1, 0, 0);
}

//-------------------------------------------------------------------------------------------------

SDHCALDetectorModule::~SDHCALDetectorModule()
{

}

//-------------------------------------------------------------------------------------------------

StatusCode SDHCALDetectorModule::init()
{
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMModuleApi::mkdir(this, "Nhit"));
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMModuleApi::mkdir(this, "Profile"));


	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMModuleApi::cd(this, "/Nhit"));

	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMModuleApi::bookIntHistogram1D(this,
			m_pNHitPlot, "NHit", "Total number of hits", 1400, 1, 1400));
	m_pNHitPlot->setResetPolicy(END_OF_RUN_RESET_POLICY);

	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMModuleApi::bookIntHistogram1D(this,
			m_pNHit1Plot, "NHit1", "Number of hits threshold 1", 1400, 1, 1400));
	m_pNHit1Plot->setResetPolicy(END_OF_RUN_RESET_POLICY);

	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMModuleApi::bookIntHistogram1D(this,
			m_pNHit2Plot, "NHit2", "Number of hits threshold 2", 1400, 1, 1400));
	m_pNHit2Plot->setResetPolicy(END_OF_RUN_RESET_POLICY);

	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMModuleApi::bookIntHistogram1D(this,
			m_pNHit3Plot, "NHit3", "Number of hits threshold 3", 1400, 1, 1400));
	m_pNHit3Plot->setResetPolicy(END_OF_RUN_RESET_POLICY);


	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMModuleApi::cd(this, "/Profile"));

	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMModuleApi::bookIntHistogram2D(this,
			m_pTransverseShowerProfile, "TransverseEventProfile", "Transverse event profile (IJK)", 96, 1, 96, 96, 1, 96));
	m_pTransverseShowerProfile->setResetPolicy(END_OF_RUN_RESET_POLICY);

	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMModuleApi::bookIntHistogram1D(this,
			m_pLongitudinalShowerProfile, "LongitudinalEventProfile", "Longitudinal event profile (layer)", 48, 0, 47));
	m_pLongitudinalShowerProfile->setResetPolicy(END_OF_RUN_RESET_POLICY);

	// go back to root dir and list the content
	DQMModuleApi::cd(this);
	DQMModuleApi::ls(this, true);

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode SDHCALDetectorModule::readSettings(const TiXmlHandle &xmlHandle)
{
//	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, XmlHelper::readValue(xmlHandle, "ProcessCollectionType", m_processCollectionType));
//	std::cout << "m_processCollectionType : " << m_processCollectionType << std::endl;

	m_sleepTime = 0;
	RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, XmlHelper::readValue(xmlHandle, "SleepTime", m_sleepTime));
	streamlog_out(MESSAGE) << "Sleep time = " << m_sleepTime << " s" << std::endl;

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode SDHCALDetectorModule::end()
{
	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode SDHCALDetectorModule::processEvent(EVENT::LCEvent *pLCEvent)
{
	const std::vector<std::string> *collectionNames = pLCEvent->getCollectionNames();

	for(std::vector<std::string>::const_iterator iter = collectionNames->begin(), endIter = collectionNames->end() ;
		endIter != iter ; ++iter)
	{
		EVENT::LCCollection *pCollection = pLCEvent->getCollection(*iter);

		if(pCollection->getTypeName() == EVENT::LCIO::CALORIMETERHIT)
		{
			UTIL::CellIDDecoder<EVENT::CalorimeterHit> decoder(pCollection);

			TH1I *pNHitHisto = (TH1I *) m_pNHitPlot->getObject();
			pNHitHisto->Fill(pCollection->getNumberOfElements());

			unsigned int nHit1 = 0;
			unsigned int nHit2 = 0;
			unsigned int nHit3 = 0;

			for(unsigned int e=0 ; e<pCollection->getNumberOfElements() ; e++)
			{
				EVENT::CalorimeterHit *pCaloHit = dynamic_cast<EVENT::CalorimeterHit*>(pCollection->getElementAt(e));

				unsigned int I = decoder(pCaloHit)["I"];
				unsigned int J = decoder(pCaloHit)["J"];
				unsigned int K = decoder(pCaloHit)["K-1"];

				if(pCaloHit->getEnergy() == 1.f)
					nHit1++;
				else if(pCaloHit->getEnergy() == 2.f)
					nHit2++;
				else if(pCaloHit->getEnergy() == 3.f)
					nHit3++;

				TH2I *pTransverseEventProfileHisto = (TH2I*) m_pTransverseShowerProfile->getObject();
				pTransverseEventProfileHisto->Fill(I, J);

				TH1I *pLongitudinalShowerProfileHisto = (TH1I*) m_pLongitudinalShowerProfile->getObject();
				pLongitudinalShowerProfileHisto->Fill(K);
			}

			TH1I *pNHit1Histo = (TH1I*) m_pNHit1Plot->getObject();
			pNHit1Histo->Fill(nHit1);

			TH1I *pNHit2Histo = (TH1I*) m_pNHit2Plot->getObject();
			pNHit2Histo->Fill(nHit2);

			TH1I *pNHit3Histo = (TH1I*) m_pNHit3Plot->getObject();
			pNHit3Histo->Fill(nHit3);

		}
	}

	sleep(m_sleepTime);

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode SDHCALDetectorModule::startOfCycle()
{
	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode SDHCALDetectorModule::endOfCycle()
{
	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode SDHCALDetectorModule::startOfRun(EVENT::LCRunHeader *pRunHeader)
{
	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode SDHCALDetectorModule::endOfRun(EVENT::LCRunHeader *pRunHeader)
{
	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode SDHCALDetectorModule::reset()
{
	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

const std::string &SDHCALDetectorModule::getDetectorName() const
{
	return m_detectorName;
}

//-------------------------------------------------------------------------------------------------

const DQMVersion &SDHCALDetectorModule::getVersion() const
{
	return m_version;
}

//-------------------------------------------------------------------------------------------------

