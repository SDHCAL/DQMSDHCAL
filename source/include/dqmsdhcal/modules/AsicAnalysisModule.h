  /// \file AsicAnalysisModule.h
/*
 *
 * AsicAnalysisModule.h header template automatically generated by a class generator
 * Creation date : ven. aoï¿½t 28 2015
 *
 * This file is part of DQMSDHCAL libraries.
 * 
 * DQMSDHCAL is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQMSDHCAL is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQMSDHCAL.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete, Arnaud Steen
 * @copyright CNRS , IPNL
 */


#ifndef ASICANALYSISMODULE_H
#define ASICANALYSISMODULE_H

// -- dqm4hep headers
#include "dqm4hep/core/DQM4HEP.h"
#include "dqm4hep/module/DQMAnalysisModule.h"

// -- lcio headers
#include "lcio.h"
#include "EVENT/CalorimeterHit.h"

// -- specific module header
#include "Asic.h"
#include "Cluster.h"
#include "PCA.hh"
#include "Linear3DFit.hh"
#include "ThreeVector.hh"
#include "Layer.h"

// -- std headers
#include <string>
#include <cstring>
#include <vector>

#include "dqmsdhcal/trivent/Trivent.h"
#include "dqmsdhcal/streamout/Streamout.h"

namespace dqm_sdhcal
{

/** AsicAnalysisModule class
 */ 
class AsicAnalysisModule : public dqm4hep::DQMAnalysisModule
{
public:
	/** Constructor
	 */
	AsicAnalysisModule();

	/** Destructor
	 */
	virtual ~AsicAnalysisModule();

	dqm4hep::StatusCode initModule();
	dqm4hep::StatusCode readSettings(const Json::Value &value);
	dqm4hep::StatusCode processEvent(dqm4hep::DQMEvent *pEvent);
	dqm4hep::StatusCode startOfCycle();
	dqm4hep::StatusCode endOfCycle();
	dqm4hep::StatusCode startOfRun(dqm4hep::DQMRun *pRun);
	dqm4hep::StatusCode endOfRun(dqm4hep::DQMRun *pRun);
	dqm4hep::StatusCode endModule();
	dqm4hep::DQMPlugin *clone() const;

	dqm4hep::StatusCode doTrackStudy(const std::vector<EVENT::LCEvent*> &eventList);
	void doTrackStudy();
	void clearContents();
	bool TrackSelection(std::vector<Cluster*> &clVec);
	void LayerProperties(std::vector<Cluster*> &clVec);
	int findAsicKey(int layer,float x, float y);

protected:

	// streamout
	bool                              m_shouldProcessStreamout;
	std::string                       m_streamoutInputCollectionName;
	std::string                       m_streamoutOutputCollectionName;
	unsigned int                     m_xdaqShift;
	Streamout                        *m_pStreamout;

	// trivent
	bool                              m_shouldProcessTrivent;
	std::string            	          m_triventInputCollectionName;
	std::string                       m_triventOutputCollectionName;
	Trivent                          *m_pTrivent;

	unsigned int                    m_nActiveLayers;
	unsigned int                    m_expectedNTracksPerAsicOverRun;
	std::string                      m_inputCollectionName;

	std::vector<EVENT::CalorimeterHit*> m_calorimeterHitCollection;

	std::vector<Cluster*> clusters;
	std::map<int,Asic*> asicMap;
}; 

} 

#endif  //  ASICANALYSISMODULE_H
