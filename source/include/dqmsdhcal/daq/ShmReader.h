  /// \file ShmReader.h
/*
 *
 * ShmReader.h header template automatically generated by a class generator
 * Creation date : mar. mai 5 2015
 *
 * This file is part of DQMSDHCAL libraries.
 * 
 * DQMSDHCAL is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQMSDHCAL is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQMSDHCAL.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef SHMREADER_H
#define SHMREADER_H

#include "dqm4hep/core/DQM4HEP.h"

namespace dqm4hep { class DQMDataSender; }
namespace EVENT { class LCEvent; class LCCollection; }


namespace dqm_sdhcal
{

/** ShmReader class
 */ 
class ShmReader 
{
public:
	typedef std::map<uint64_t, std::vector<unsigned char*> > BufferMap;

	ShmReader(const std::string &eventCollectorName);
	~ShmReader();

	void setMonitoringDirectory(const std::string &directory);
	void setDetectorName(const std::string &detectorName);
	void setCollectionName(const std::string &collectionName);
	void setNumberOfDifs(unsigned int nDifs);

	void start();

private:

	EVENT::LCEvent *createEvent();
	EVENT::LCCollection *createRawDataCollection() const;
	void addDifEntryInCollection(EVENT::LCCollection *pCollection, int *pBuffer, int bufferSize) const;

	std::string                 m_monitoringDirectory;
	std::string                 m_detectorName;
	std::string                 m_collectionName;
	unsigned int              m_numberOfDifs;

	int                         m_currentEventNumber;
	dqm4hep::DQMDataSender     *m_pEventSender;
};

inline void ShmReader::setMonitoringDirectory(const std::string &directory)
{
	m_monitoringDirectory = directory;
}

inline void ShmReader::setDetectorName(const std::string &detectorName)
{
	m_detectorName = detectorName;
}

inline void ShmReader::setCollectionName(const std::string &collectionName)
{
	m_collectionName = collectionName;
}

inline void ShmReader::setNumberOfDifs(unsigned int nDifs)
{
	m_numberOfDifs = nDifs;
}

}

#endif  //  SHMREADER_H
