  /// \file DQMRawDataConverter.h
/*
 *
 * DQMRawDataConverter.h header template automatically generated by a class generator
 * Creation date : dim. aoï¿½t 30 2015
 *
 * This file is part of DQMSDHCAL libraries.
 * 
 * DQMSDHCAL is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQMSDHCAL is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQMSDHCAL.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQMRAWDATACONVERTER_H
#define DQMRAWDATACONVERTER_H

// -- dqm4hep headers
#include "dqm4hep/core/DQM4HEP.h"
#include "dqm4hep/application/DQMApplication.h"
#include "dqm4hep/network/DQMDataClient.h"
#include "dqm4hep/network/DQMDataSender.h"

#include "dqmsdhcal/streamout/Streamout.h"
#include "dqmsdhcal/trivent/Trivent.h"

namespace dqm_sdhcal
{

#define CONVERTER_TYPE_TABLE(d) \
	d(RAW_DATA_TO_RAW_CALORIMETER_HIT,        "RAW_DATA_TO_CALORIMETER_HIT") \
	d(RAW_DATA_TO_CALORIMETER_HIT,            "RAW_DATA_TO_CALORIMETER_HIT") \
	d(RAW_CALORIMETER_HIT_TO_CALORIMETER_HIT, "RAW_CALORIMETER_HIT_TO_CALORIMETER_HIT")

/** ConverterType enum
 */
enum ConverterType
{
	CONVERTER_TYPE_TABLE(GET_ENUM_ENTRY)
	NUMBER_OF_CONVERTER_TYPES
};

/** ConverterType to std::string
 */
std::string converterTypeToString(ConverterType converterType);

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

/** DQMRawDataConverterApplication class
 */
class DQMRawDataConverterApplication : public dqm4hep::DQMApplication
{
public:
	/** Constructor
	 */
	DQMRawDataConverterApplication();

	/** Destructor
	 */
	~DQMRawDataConverterApplication();

	/** Infinite loop where events are received, converted and published
	 */
	dqm4hep::StatusCode run();

	/** Exit the application
	 */
	dqm4hep::StatusCode exit(int returnCode);

	/** Read settings from a json file
	 */
	dqm4hep::StatusCode readSettings(const std::string &settingsFile);

	/** Get the application type
	 */
	const std::string &getType() const;

	/** Get the application name
	 */
	const std::string &getName() const;

private:

	ConverterType        m_converterType;

	dqm4hep::DQMDataClient    *m_pDataClient;
	dqm4hep::DQMDataSender    *m_pDataSender;

	Streamout                 *m_pStreamout;
	Trivent                   *m_pTrivent;

	bool                      m_stopFlag;
	dqm4hep::StatusCode       m_returnStatusCode;

	std::string               m_type;
	std::string               m_name;

	unsigned int            m_timeSleepPublication;
};

} 

#endif  //  DQMRAWDATACONVERTER_H
