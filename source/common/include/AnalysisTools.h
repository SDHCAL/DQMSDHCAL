  /// \file AnalysisTools.h
/*
 *
 * AnalysisTools.h header template automatically generated by a class generator
 * Creation date : ven. avr. 15 2016
 *
 * This file is part of DQMSHCAL libraries.
 * 
 * DQMSHCAL is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQMSHCAL is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQMSHCAL.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef ANALYSISTOOLS_H
#define ANALYSISTOOLS_H

// -- dqm4hep headers
#include "dqm4hep/DQM4HEP.h"

// -- lcio headers
#include "EVENT/LCEvent.h"

namespace dqm4hep { class TiXmlHandle; }

namespace dqm_sdhcal
{

/** EventClassifier class
 */ 
class EventClassifier
{
public:
	/** EventType enumerator
	 */
	enum EventType
	{
		UNDEFINED_EVENT,
		SQUARE_NOISE_EVENT,
		GROUNDING_NOISE_EVENT,
		BEAM_MUON_EVENT,
		COSMIC_MUON_EVENT,
		SHOWER_EVENT,
		ELECTRON_SHOWER_EVENT,
		HADRONIC_SHOWER_EVENT
	};

public:
	/** Constructor
	 */
	EventClassifier();

	/** Destructor
	 */
	virtual ~EventClassifier();

	/** Process the event and classify it
	 */
	virtual dqm4hep::StatusCode processEvent(EVENT::LCEvent *pLCEvent) = 0;

	/** Whether the event has been classified as a noisy one.
	 *  Could be one of the following event type
	 *   - SQUARE_NOISE_EVENT,
	 *	 - GROUNDING_NOISE_EVENT,
	 *  May be overloaded by user to define more event types
	 */
	virtual bool isNoisyEvent() const;

	/** Whether the event has been classified as a physics one.
	 *  Could be one of the following event type
	 *   - BEAM_MUON_EVENT,
	 *	 - COSMIC_MUON_EVENT,
	 *	 - SHOWER_EVENT,
	 *	 - ELECTRON_SHOWER_EVENT,
	 *	 - HADRONIC_SHOWER_EVENT
	 *  May be overloaded by user to define more event types
	 */
	virtual bool isPhysicsEvent() const;

	/** Whether the event has been classified as a muon one.
	 *  Could be one of the following event type
	 *   - BEAM_MUON_EVENT,
	 *	 - COSMIC_MUON_EVENT,
	 *  May be overloaded by user to define more event types
	 */
	virtual bool isMuonEvent() const;

	/** Whether the event has been classified as a shower one.
	 *  Could be one of the following event type
	 *	 - SHOWER_EVENT,
	 *	 - ELECTRON_SHOWER_EVENT,
	 *	 - HADRONIC_SHOWER_EVENT
	 *  May be overloaded by user to define more event types
	 */
	virtual bool isShowerEvent() const;

	/** Whether the event has been classified as undefined.
	 */
	virtual bool isUndefined() const;

	/** Read settings from the xml handle
	 */
	virtual dqm4hep::StatusCode readSettings(const dqm4hep::TiXmlHandle xmlHandle) = 0;

	/** Get the event type after event classification
	 *  May be set in processEvent(evt) by subclasses
	 *  using setEventType(type, level)
	 */
	EventType getEventType() const;

	/** Get the confidence level of the event classification
	 *  Range and meaning is user defined
	 */
	unsigned int getConfidenceLevel() const;

protected:
	/** Set the event type and confidence level of the current event.
	 *  May be called from processEvent(evt) by subclasses
	 */
	void setEventType(EventType type, unsigned int confidenceLevel);

private:
	unsigned int                     m_confidenceLevel;
	EventType                        m_eventType;
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

/** SDHCALEventClassifier class
 */
class SDHCALEventClassifier : public EventClassifier
{
public:
	/** Constructor
	 */
	SDHCALEventClassifier();

	/** Process the event and classify it
	 */
	dqm4hep::StatusCode processEvent(EVENT::LCEvent *pLCEvent);

	/** Read settings from the xml handle
	 */
	dqm4hep::StatusCode readSettings(const dqm4hep::TiXmlHandle xmlHandle);

private:
	std::string                 m_inputCollectionName;
	std::string                 m_cellIDDecoderString;
	float                       m_noiseMinNHitPerTouchedLayer;
	float                       m_noiseMaxNHitPerTouchedLayer;
	unsigned int                m_noiseMinNHit;
};

} 

#endif  //  ANALYSISTOOLS_H
