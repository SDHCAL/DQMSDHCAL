  /// \file Geometry.h
/*
 *
 * Geometry.h header template automatically generated by a class generator
 * Creation date : lun. avr. 11 2016
 *
 * This file is part of DQMSDHCAL libraries.
 * 
 * DQMSDHCAL is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQMSDHCAL is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQMSDHCAL.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQMSDHCAL_GEOMETRY_H
#define DQMSDHCAL_GEOMETRY_H

// -- dqm4hep headers
#include "dqm4hep/DQM4HEP.h"
#include "dqm4hep/DQMDBInterface.h"

namespace dqm_sdhcal
{

struct DifGeometry
{
	unsigned int    m_difId;
	unsigned int    m_shiftX;
	unsigned int    m_shiftY;
	unsigned int    m_layerId;
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

struct ChamberGeometry
{
	unsigned int    m_layerId;
	float           m_x0;
	float           m_y0;
	float           m_z0;
	float           m_x1;
	float           m_y1;
	float           m_z1;
	std::map<unsigned int, DifGeometry> m_difList;
};

typedef std::map<unsigned int, ChamberGeometry> Geometry;
typedef std::map<unsigned int, DifGeometry> DifMapping;

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

/** GeometryDBInterface class
 */ 
class GeometryDBInterface : public dqm4hep::DQMDBInterface
{
public:
	/** Constructor
	 */
	GeometryDBInterface();

	/** Destructor
	 */
	~GeometryDBInterface();

	/**
	 */
	dqm4hep::StatusCode queryGeometry(const std::string &testName, std::map<unsigned int, ChamberGeometry> &geometry ,
			const dqm4hep::UIntVector &layerMask = dqm4hep::UIntVector() , const dqm4hep::UIntVector &difMask = dqm4hep::UIntVector());

	/** Dump
	 */
	dqm4hep::StatusCode dumpGeometry(const std::string &fileName, const std::string &testName,
			const dqm4hep::UIntVector &layerMask = dqm4hep::UIntVector() , const dqm4hep::UIntVector &difMask = dqm4hep::UIntVector());
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

/** GeometryXmlIO class
 */
class GeometryXmlIO
{
public:
	/** Save geometry to xml file
	 */
	dqm4hep::StatusCode saveAs(const std::string &fileName, const std::map<unsigned int, ChamberGeometry> &geometry,
			const dqm4hep::UIntVector &layerMask = dqm4hep::UIntVector() , const dqm4hep::UIntVector &difMask = dqm4hep::UIntVector());

	/** Load the geometry fromx xml file
	 */
	dqm4hep::StatusCode load(const std::string &fileName, std::map<unsigned int, ChamberGeometry> &geometry,
			const dqm4hep::UIntVector &layerMask = dqm4hep::UIntVector() , const dqm4hep::UIntVector &difMask = dqm4hep::UIntVector());
};

} 

#endif  //  DQMSDHCAL_GEOMETRY_H
