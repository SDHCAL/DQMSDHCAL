  /// \file DataConverters.h
/*
 *
 * DataConverters.h header template automatically generated by a class generator
 * Creation date : ven. avr. 8 2016
 *
 * This file is part of DQMSDHCAL libraries.
 * 
 * DQMSDHCAL is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQMSDHCAL is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQMSDHCAL.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DATACONVERTERS_H
#define DATACONVERTERS_H

// -- dqm4hep headers
#include "dqm4hep/DQM4HEP.h"
#include "dqm4hep/DQMDataConverter.h"

#include "EVENT/RawCalorimeterHit.h"
#include "IMPL/CalorimeterHitImpl.h"

namespace EVENT { class LCCollection; }
namespace dqm4hep { class DQMElectronicsMapping; }

namespace dqm_sdhcal
{

typedef dqm4hep::DQMDataConverter<EVENT::LCCollection, EVENT::LCCollection> CaloHitCollectionConverter;

/** SDHCALCaloHitConverter class
 */
class SDHCALCaloHitConverter : public CaloHitCollectionConverter
{
public:
	/** Constructor
	 */
	SDHCALCaloHitConverter();

	/** Desstructor
	 */
	~SDHCALCaloHitConverter();

	/** Perform conversion from input type to output type
	 */
	dqm4hep::StatusCode convert(const EVENT::LCCollection *const pInputCollection, EVENT::LCCollection *const pOutputCollection);

	/** Read settings from xml handle
	 */
	dqm4hep::StatusCode readSettings(const dqm4hep::TiXmlHandle handle);

	/// cellID conversion
	inline unsigned int getDifId(int cellID)      { return cellID & 0xFF; }
	inline unsigned int getAsicId(int cellID)     { return (cellID & 0xFF00)>>8; }
	inline unsigned int getChannelId(int cellID)  { return (cellID & 0x3F0000)>>16; }

	unsigned int getThreshold( const EVENT::RawCalorimeterHit *const pInputCaloHit );

private:
	dqm4hep::DQMElectronicsMapping                  *m_pElectronicsMapping;
	std::string                                      m_cellIDEncoderString;
	unsigned short                                   m_amplitudeBitRotation;
	bool                                             m_isInitialized;
	bool                                             m_encodeDifAsicChannel;
	dqm4hep::StringVector                            m_ijkEncoding;
	dqm4hep::StringVector                            m_difAsicChannelEncoding;
};

} 

#endif  //  DATACONVERTERS_H
